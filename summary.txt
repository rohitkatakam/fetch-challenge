1. The options I narrowed down to were Django and Flask because I have experience with both of these frameworks. I wanted one of these two since I prefer to program in Python, the language I'm most comfortable in. Flask is better for really simple REST APIs compared to Django, so I settled on Flask based on the task at hand.
2. My solution has all the required functionality, including all the error handling necessary. For example, I enforced JSON format for the bodies of the POST request, strictly adhering to the guidelines. One disadvantage my solution has is that the user can't add two transactions with the same timestamp. This specific scenario was not mentioned in the assignment, and I decided to not allow this because realistically a user can't make simultaneous transactions (assuming the /add API is called the exact second a user completes any given transaction).
3. My favorite personal project has been creating my AI-powered workout tracker. I developed it entirely myself, and I'm beta testing it now. I love it because I personally use it every day and it's really helped me improve my physical health (getting training data for a workout app turns out to be great motivation to go to the gym). The most challenging part of creating this app was planning out the features I wanted. What started as a way to categorize workouts from your Apple Watch turned into visualizations and personalized predictive models, and I could've done a lot better of a job planning out what I wanted prior to developing.